---
import Layout from "../../layouts/Layout.astro";
import LandingHeader from "../../components/LandingHeader.astro";
import Logo from "../../components/Logo.astro";
import { years, players } from "../../lib/data";
import YearList from "../../components/YearList.astro";

const { id } = Astro.params;

if (!id) {
  throw new Error(`Year id is missing`);
}

const currentYear = years.find(year => year.id === id);
if (!currentYear) {
  throw new Error(`Year with id ${id} not found`);
}

const filteredPlayers = players.filter(player => player.years.includes(currentYear.number));
const positionOrder: Record<string, number> = {
  'top': 1,
  'jungler': 2,
  'mid': 3,
  'mid/adc': 4,
  'adc': 5,
  'support': 6
};

filteredPlayers.sort((a, b) => positionOrder[a.position] - positionOrder[b.position]);

const displayYear = (yearNumber: number): string => {
  switch (yearNumber) {
    case 2016.1:
      return "2016 Spring";
    case 2016.2:
      return "2016 Summer";
    case 2016.3:
      return "2016 Worlds";
    default:
      return yearNumber.toString();
  }
};
---

<Layout title={`G2 History - ${displayYear(currentYear.number)}`}>
  <LandingHeader />
  <div class="flex flex-col lg:flex-row md:mt-8 mt-0">
    <!-- For larger screens -->
    <aside class="hidden lg:block w-full lg:w-1/4 bg-gray-100/50 md:p-8 lg:ml-14 rounded-xl lg:mb-0">
      <div class="grid grid-cols-2 gap-4 relative">
        <div class="col-span-2 absolute inset-y-0 left-1/2 w-0.5 bg-gray-300 transform -translate-x-1/2"></div>
        {
          years.slice(0, -1).map((year) => (
            <div class="mb-2 flex justify-center items-center">
              <YearList year={year} displayNumber={displayYear(year.number)} />
            </div>
          ))
        }
      </div>
    </aside>

    <!-- For smaller screens -->
    <aside class="block lg:hidden w-full bg-gray-100/50 p-2 rounded-xl mt-2 mb-4">
      <div class="grid grid-cols-2 gap-2 relative">
        <div class="col-span-2 absolute inset-y-0 left-1/2 w-0.5 bg-gray-300 transform -translate-x-1/2"></div>
        {
          years.slice(0, -1).map((year) => (
            <div class="mb-1 flex justify-center items-center">
              <YearList year={year} displayNumber={displayYear(year.number)} />
            </div>
          ))
        }
      </div>
    </aside>

    <main class="w-full lg:w-3/4 md:p-4 p-1 flex flex-col items-center lg:mt-0 mt-0">
      <h2 class="text-2xl font-bold mb-4 text-center">Players for {displayYear(currentYear.number)}</h2>
      <div class="flex flex-wrap space-x-4 justify-center">
        {
          filteredPlayers.map((player) => (
            <a href={`/players/${player.id}`} class="flex flex-col items-center transition-all duration-300 mb-4">
              <img src={player.image} alt={player.name} class="w-24 h-24 sm:w-32 sm:h-32 md:w-40 md:h-40 rounded-full mb-2 object-cover object-top" transition:name={`player ${player.id} image`} loading="lazy" />
              <p class="text-center">{player.name}</p>
            </a>
          ))
        }
      </div>
    </main>
  </div>
</Layout>

<script>
  // Función para pre-cargar imágenes
  const preloadImages = (urls: string[]) => {
    urls.forEach((url) => {
      const img = new Image();
      img.src = url;
    });
  };

  // Pre-cargar imágenes cuando el documento esté listo
  document.addEventListener("DOMContentLoaded", () => {
    const playerImages = JSON.parse('{{JSON.stringify(players.map(player => player.image))}}');
    preloadImages(playerImages);
  });
</script>
